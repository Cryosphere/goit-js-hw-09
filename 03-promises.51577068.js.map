{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAG5BA,EAAM,G,CAIb,MAAMQ,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,UAAWC,IAC/BA,EAAMC,iBACN,MAAMC,EAAQC,SAASP,EAAKQ,SAAShB,MAAMiB,OACrCC,EAAOH,SAASP,EAAKQ,SAASE,KAAKD,OACnCE,EAASJ,SAASP,EAAKQ,SAASG,OAAOF,OAE7C,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAEftB,EADCsB,EAAE,EACqBN,EAAQM,EAAIF,GAC5CG,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACxBsB,EAAA1B,GAAS2B,OAAOC,QAAQ,qBAAqBzB,QAAeC,MAAU,IACrEyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MACpBsB,EAAA1B,GAAS2B,OAAOG,QAAQ,oBAAoB3B,QAAeC,MAAU,G,KAmB3E2B,QAAQC,IAbR,SAAkBC,EAAKC,GAErB,IAAIC,EAAO,GACXA,EAAM,IAAIF,GACV,IAAIG,EAAO,IAAKF,GAChB,IAAI,IAAIV,EAAEY,EAAKC,OAAO,EAAEb,GAAG,EAAEA,KACvBY,EAAKZ,KAAKW,EAAKX,IACjBO,QAAQC,IAAIR,EAAEY,EAAKZ,IAErBO,QAAQC,IAAIR,EAAEY,EAAKZ,GAAGW,EAAKX,IAE7B,OAAO,C,CAEGc,CAAS,OAAQ","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Fulfill\n      } else {\n        reject({ position, delay });\n        // Reject\n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', (event) => {\n  event.preventDefault();\n  const delay = parseInt(form.elements.delay.value);\n  const step = parseInt(form.elements.step.value);\n  const amount = parseInt(form.elements.amount.value);\n\n  for (let i = 0; i < amount; i++) {\n    const position = i+1;\n    const promise = createPromise(position, delay + i * step);\n    promise.then(({ position, delay }) => {\n      Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n    }).catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n    });\n  }\n});\n\n\nfunction solution(str, ending){\n  // TODO: complete\n  let rstr = [];\n  rstr =[...str];\n  let argn = [ ...ending ];\n  for(let i=argn.length-1;i>=0;i--){\n    if(!argn[i]===rstr[i]){\n      console.log(i,argn[i]);\n    }\n    console.log(i,argn[i],rstr[i]);\n  }\n  return true;\n}\nconsole.log(solution('sumo', 'amo'));\n \n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$form","document","querySelector","addEventListener","event","preventDefault","delay1","parseInt","elements","value","step","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure","console","log","str","ending","rstr","argn","length","$47d4ff9957288465$var$solution"],"version":3,"file":"03-promises.51577068.js.map"}